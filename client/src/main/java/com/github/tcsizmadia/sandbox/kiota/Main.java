package com.github.tcsizmadia.sandbox.kiota;

import com.github.tcsizmadia.sandbox.kiota.sdkclient.ApiClient;
import com.github.tcsizmadia.sandbox.kiota.sdkclient.models.Person;
import com.github.tcsizmadia.sandbox.kiota.sdkclient.models.PersonOccupation;
import com.microsoft.kiota.ApiException;
import com.microsoft.kiota.authentication.AnonymousAuthenticationProvider;
import com.microsoft.kiota.http.OkHttpRequestAdapter;

import java.util.Objects;

/**
 * This is a simple example of how to use the SDK client generated by Microsoft Kiota.
 * <p>
 * The SDK client is generated from the OpenAPI specification of the API.
 * It is type safe and provides a fluent API to interact with the API.
 * In this demonstration, we are going to list all persons and their quotes.
 * Because we are using an anonymous authentication provider, we can only read data.
 * So the <code>POST</code> request to create a new person will fail. This is expected.
 *
 * @author Tamas Csizmadia
 */
public class Main {
    public static void main(String[] args) {
        final var authProvider = new AnonymousAuthenticationProvider();
        final var requestAdapter = new OkHttpRequestAdapter(authProvider);
        final var client = new ApiClient(requestAdapter);

        Objects.requireNonNull(client.persons().get()).forEach((p) -> {
            System.out.println("\n" + p.getName() + " (" + p.getOccupation().toString().toLowerCase() + ")");
            System.out.println("--------------------------");

            if (null != p.getId()) {
                Objects.requireNonNull(client.quotes().author().byAuthorId(p.getId()).get()).forEach((q) -> {
                    System.out.println(q.getContent());
                });
            }
        });

        try {
            System.out.println("\nCreating a new person...");
            var person = new Person();
            person.setName("John Doe");
            person.setOccupation(PersonOccupation.ATHLETE);
            // Remember, to create or update a person, we need to authenticate ourselves.
            client.persons().post(person);
        } catch (ApiException e) {
            // This is expected, because we are using an anonymous authentication provider.
            System.err.println("Failed to create a new person: " + e.getMessage());
        }
    }
}